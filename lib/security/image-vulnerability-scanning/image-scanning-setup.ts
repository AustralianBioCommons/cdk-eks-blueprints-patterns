import { Construct } from "constructs";
import * as cr from "aws-cdk-lib/custom-resources";
import * as iam from "aws-cdk-lib/aws-iam";
import * as blueprints from "@aws-quickstart/eks-blueprints";
import { NestedStack, NestedStackProps } from "aws-cdk-lib";
import * as sns from "aws-cdk-lib/aws-sns";
import * as subs from "aws-cdk-lib/aws-sns-subscriptions";
import * as events from "aws-cdk-lib/aws-events";
import * as eventTargets from "aws-cdk-lib/aws-events-targets";
import * as AWS from "aws-sdk";

export class ImageScanningSetupStack extends NestedStack {
  public static builder(
    email: string,
    scanType: "BASIC" | "ENHANCED",
    rules?: AWS.ECR.RegistryScanningRuleList
  ): blueprints.NestedStackBuilder {
    return {
      build(scope: Construct, id: string, props: NestedStackProps) {
        return new ImageScanningSetupStack(
          scope,
          id,
          props,
          email,
          scanType,
          rules
        );
      },
    };
  }

  constructor(
    scope: Construct,
    id: string,
    props: NestedStackProps,
    email: string,
    scanType: "BASIC" | "ENHANCED",
    rules?: AWS.ECR.RegistryScanningRuleList
  ) {
    super(scope, id, props);

    let registyScanConfig: AWS.ECR.PutRegistryScanningConfigurationRequest;
    if (scanType === "ENHANCED") {
      registyScanConfig = {
        scanType: "ENHANCED",
        rules,
      };
    } else {
      registyScanConfig = {
        scanType: "BASIC",
        rules,
      };
    }

    new cr.AwsCustomResource(this, "EnhancedScanningEnabler", {
      policy: cr.AwsCustomResourcePolicy.fromStatements([
        new iam.PolicyStatement({
          actions: ["config:*", "ecr:PutRegistryScanningConfiguration"],
          resources: ["*"],
        }),
      ]),
      onUpdate: {
        service: "ECR",
        action: "putRegistryScanningConfiguration",
        parameters: registyScanConfig,
        physicalResourceId: cr.PhysicalResourceId.of("EnhancedScanningEnabler"),
      },
    });

    // Configure Inspector2 to report image scan results
    const imageScanTopic = new sns.Topic(
      this,
      id + "ImageScanNotificationTopic"
    );
    imageScanTopic.addSubscription(new subs.EmailSubscription(email));
    const scanEventRule = new events.Rule(this, id + "ImageScanEventRule", {
      eventPattern: {
        source: ["aws.inspector2"],
        detailType: ["Inspector2 Scan"],
      },
    });
    // Format the scan results emails
    scanEventRule.addTarget(
      new eventTargets.SnsTopic(imageScanTopic, {
        message: events.RuleTargetInput.fromText(
          `WARNING: Image security scan has completed for ${events.EventField.fromPath(
            "$.detail.repository-name"
            )} 
          with ${events.EventField.fromPath(
            "$.detail.finding-severity-counts.TOTAL"
            )} findings. 
          Findings severity breakdown: ${events.EventField.fromPath(
            "$.detail.finding-severity-counts.CRITICAL"
          )} critical,
          ${events.EventField.fromPath(
            "$.detail.finding-severity-counts.HIGH"
          )} high,
          ${events.EventField.fromPath(
            "$.detail.finding-severity-counts.MEDIUM"
          )} medium.
          Please go to https://${events.EventField.fromPath(
            "$.region"
          )}.console.aws.amazon.com/inspector/v2/home to find out more details.`
        ),
      })
    );
    const findingsEventRule = new events.Rule(this, id + "FindingEventRule", {
      eventPattern: {
        source: ["aws.inspector2"],
        detailType: ["Inspector2 Finding"],
      },
    });
    // Format the finding results emails
    findingsEventRule.addTarget(
      new eventTargets.SnsTopic(imageScanTopic, {
        message: events.RuleTargetInput.fromText(
          `WARNING: New finding has been detected for ${events.EventField.fromPath(
            "$.detail.resources
  }
}
